struct DirectLight{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec3 direction;
};

struct PointLight{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec3 position;
    float cstant;
    float linear;
    float quadratic;
    float used;
};

struct Spotlight{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec3 position;
    vec3 spot_direction;
    float cutOff;
    float outerCutOff;
    float cstant;
    float linear;
    float quadratic;
};

struct PhongLightMaterial{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct TextureParam {
    vec2 uvTimes;
    vec2 uvOffset;
    bool enable;
};

vec3 phongLightAmbient(vec3 lightColor, vec3 ambientColor){
    return lightColor * ambientColor;
}

vec3 phongLightDiffuse(vec3 nNormal, vec3 lightDir, vec3 lightColor, vec3 diffuseColor){
    vec3 nLightDir = normalize(lightDir);
    float d = max(dot(nNormal, nLightDir), 0.f);
    return lightColor * d * diffuseColor;
}

vec3 phongLightSpecular(vec3 nNormal, vec3 viewDir, vec3 lightDir, vec3 lightColor, vec3 specularColor, float shininess){
    vec3 nLightDir = normalize(lightDir);
    vec3 reflectDir = reflect(-nLightDir, nNormal);
    float s = pow(max(dot(reflectDir, viewDir), 0.f), shininess);
    return lightColor * s * specularColor;
}

vec3 phongDirectLight(DirectLight light, vec3 nNormal, vec3 viewDir, PhongLightMaterial lightMaterial){
    vec3 ambient = phongLightAmbient(light.ambient, lightMaterial.ambient);
    vec3 diffuse = phongLightDiffuse(nNormal, -light.direction, light.diffuse, lightMaterial.diffuse);
    vec3 specular = phongLightSpecular(nNormal, viewDir, -light.direction, light.specular, lightMaterial.specular, lightMaterial.shininess);
//    return ambient;
//    return diffuse;
//    return specular;
    return ambient + diffuse + specular;
}

vec3 phongPointLight(PointLight light, vec3 nNormal, vec3 viewDir, vec3 v_FragPos, PhongLightMaterial lightMaterial){
    vec3 light_direction = normalize(light.position - v_FragPos);
    vec3 ambient = phongLightAmbient(light.ambient, lightMaterial.ambient);
    vec3 diffuse = phongLightDiffuse(nNormal, light_direction, light.diffuse, lightMaterial.diffuse);
    vec3 specular = phongLightSpecular(nNormal, viewDir, light_direction, light.specular, lightMaterial.specular, lightMaterial.shininess);

    float distance = length(light.position - v_FragPos);
    float attenuation = 1.0 / (light.cstant + light.linear * distance + light.quadratic * (distance * distance));

    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;

    //    return ambient;
    //    return diffuse;
    //    return specular;
    return ambient + diffuse + specular;
}

vec3 phongSpotLight(Spotlight light, vec3 nNormal, vec3 viewDir, vec3 v_FragPos, PhongLightMaterial lightMaterial){
    vec3 light_direction = normalize(light.position - v_FragPos);
    vec3 ambient = phongLightAmbient(light.ambient, lightMaterial.ambient);
    vec3 diffuse = phongLightDiffuse(nNormal, light_direction, light.diffuse, lightMaterial.diffuse);
    vec3 specular = phongLightSpecular(nNormal, viewDir, light_direction, light.specular, lightMaterial.specular, lightMaterial.shininess);

    float theta = dot(light_direction, normalize(-light.spot_direction));
    float epsilon   = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

    diffuse *= intensity;
    specular *= intensity;

    float distance = length(light.position - v_FragPos);
    float attenuation = 1.0 / (light.cstant + light.linear * distance + light.quadratic * (distance * distance));
    diffuse *= attenuation;
    specular *= attenuation;

    //        return ambient;
    //        return diffuse;
    //        return specular;
    return ambient + diffuse + specular;

}

const float PI = 3.14159265359;
// Normal Distribution function --------------------------------------
float D_GGX(float dotNH, float roughness)
{
    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;
    float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
    return (alpha2)/(PI * denom*denom);
}

// Geometric Shadowing function --------------------------------------
float G_SchlicksmithGGX(float dotNL, float dotNV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;
    float GL = dotNL / (dotNL * (1.0 - k) + k);
    float GV = dotNV / (dotNV * (1.0 - k) + k);
    return GL * GV;
}

// Fresnel function ----------------------------------------------------
vec3 F_Schlick(float cosTheta, float metallic, vec3 materialcolor)
{
    vec3 F0 = mix(vec3(0.04), materialcolor, metallic); // * material.specular
    vec3 F = F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
    return F;
}

// Specular BRDF composition --------------------------------------------


